import Professional from "../models/professional.model.js";
import Appointment from "../models/appointment.model.js";

// Create a new professional
export const createProfessional = async (req, res, next) => {
    try {
        const { nombre, apellido, especialidad, dias_laborales, horarios_laborales } = req.body;

        const newProfessional = new Professional({ nombre, apellido, especialidad, dias_laborales, horarios_laborales });
        await newProfessional.save();

        res.status(201).json({ message: "Profesional creado exitosamente", profesional: newProfessional });
    } catch (error) {
        next(error); // Handle errors generated by model validations
    }
};

// Get all specialties
export const getSpecialties = async (req, res, next) => {
    try {
        // Use `distinct` to get a unique list of specialties
        const specialties = await Professional.distinct("especialidad");

        res.status(200).json(specialties);
    } catch (error) {
        next(error);
    }
};

// Get professionals by specialty
export const getProfessionalsBySpecialty = async (req, res, next) => {
    try {
        const { especialidad } = req.params;

        const professionals = await Professional.find({ especialidad });

        if (professionals.length === 0) {
            return res.status(404).json({ message: "No se encontraron profesionales para esta especialidad" });
        }

        res.status(200).json(professionals);
    } catch (error) {
        next(error);
    }
};

// Get available schedules for a professional on a specific date
export const getAvailableSchedules = async (req, res, next) => {
    try {
        const { profesionalId } = req.params;
        const { fecha } = req.query;

        const professional = await Professional.findById(profesionalId, "horarios_laborales");
        if (!professional) {
            return res.status(404).json({ message: "Profesional no encontrado" });
        }

        const baseSchedules = calculateBaseSchedules(professional.horarios_laborales);

        const appointments = await Appointment.find({ profesional: profesionalId, fecha });

        const occupiedSchedules = appointments.map(appointment => appointment.hora);

        const availableSchedules = baseSchedules.filter(schedule => !occupiedSchedules.includes(schedule));

        res.status(200).json(availableSchedules);
    } catch (error) {
        next(error);
    }
};

// Update a professional
export const updateProfessional = async (req, res, next) => {
    try {
        const { profesionalId } = req.params;
        const { nombre, apellido, especialidad, dias_laborales, horarios_laborales } = req.body;

        const professional = await Professional.findById(profesionalId);
        if (!professional) {
            return res.status(404).json({ message: "Profesional no encontrado" });
        }

        professional.nombre = nombre || professional.nombre;
        professional.apellido = apellido || professional.apellido;
        professional.especialidad = especialidad || professional.especialidad;
        professional.dias_laborales = dias_laborales || professional.dias_laborales;
        professional.horarios_laborales = horarios_laborales || professional.horarios_laborales;

        await professional.save();

        res.status(200).json({ message: "Profesional actualizado exitosamente", profesional: professional });
    } catch (error) {
        next(error);
    }
};

// Delete a professional
export const deleteProfessional = async (req, res, next) => {
    try {
        const { profesionalId } = req.params;

        const professional = await Professional.findById(profesionalId);
        if (!professional) {
            return res.status(404).json({ message: "Profesional no encontrado" });
        }

        await Professional.findByIdAndDelete(profesionalId);

        res.status(200).json({ message: "Profesional eliminado exitosamente" });
    } catch (error) {
        next(error);
    }
};

// Calculate base schedules from working hours
const calculateBaseSchedules = (workingHours) => {
    const baseSchedules = [];

    workingHours.forEach(({ inicio, fin }) => {
        let [startHour, startMinute] = inicio.split(":").map(Number);
        const [endHour, endMinute] = fin.split(":").map(Number);

        while (startHour < endHour || (startHour === endHour && startMinute < endMinute)) {
            const schedule = `${startHour.toString().padStart(2, "0")}:${startMinute.toString().padStart(2, "0")}`;
            baseSchedules.push(schedule);

            startMinute += 20;
            if (startMinute >= 60) {
                startMinute -= 60;
                startHour += 1;
            }
        }
    });

    return baseSchedules;
};